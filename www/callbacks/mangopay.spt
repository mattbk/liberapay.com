# coding: utf8
"""An endpoint to receive Mangopay's callbacks.

Doc: https://docs.mangopay.com/api-references/notifications/
"""

from datetime import timedelta
from decimal import Decimal as D

from mangopay.resources import BankWirePayOut, Dispute, Document, PayIn, Refund

from liberapay.billing.transactions import (
    record_exchange_result, record_payout_refund, record_unexpected_payin,
    repr_error, skim_bank_wire,
    lock_disputed_funds, recover_lost_funds,
)
from liberapay.models.participant import Participant
from liberapay.utils import utcnow

EVENT_TYPES = {
    'PAYIN_NORMAL': PayIn,
    'PAYOUT_NORMAL': BankWirePayOut,
    'PAYOUT_REFUND': Refund,
}

NOTIFICATION_TIMEOUT = timedelta(days=35)

[---]

try:
    event, status = request.qs['EventType'].rsplit('_', 1)
except ValueError:
    raise response.error(400, "bad EventType")
RessourceId = request.qs['RessourceId']
try:
    int(RessourceId)
except ValueError:
    raise response.error(400, "bad RessourceId: not an integer")

cls = EVENT_TYPES.get(event)

if event == 'KYC':
    try:
        doc = Document.get(RessourceId)
    except Document.DoesNotExist:
        raise response.error(400, "bad RessourceId: DoesNotExist")
    p = Participant.from_mangopay_user_id(doc.UserId)
    if status == 'SUCCEEDED':
        if doc.Status != 'VALIDATED':
            raise response.error(400, "status mismatch")
        raise NotImplementedError
    elif status == 'FAILED':
        if doc.Status != 'REFUSED':
            raise response.error(400, "status mismatch")
        raise NotImplementedError
    elif status == 'CREATED':
        raise response.error(400, "we don't care")
    else:
        raise response.error(400, "unknown status")

elif event == 'DISPUTE':
    try:
        dispute = Dispute.get(RessourceId)
    except Dispute.DoesNotExist:
        raise response.error(400, "bad RessourceId: DoesNotExist")
    status = dispute.Status
    r = website.db.one("SELECT * FROM disputes WHERE id = %s", (RessourceId,))
    if r and r.status == status:
        raise response.success(200, "already done")
    if r:
        e_id, p_id = r.exchange_id, r.participant
        exchange = website.db.one("SELECT * FROM exchanges WHERE id = %s", (e_id,))
    else:
        assert dispute.InitialTransactionType == 'PAYIN'
        payin = PayIn.get(dispute.InitialTransactionId)
        e_id = int(payin.Tag)
        exchange = website.db.one("SELECT * FROM exchanges WHERE id = %s", (e_id,))
        p_id = exchange.participant
    dispute_type = dispute.DisputeType
    assert dispute.DisputedFunds.Currency == 'EUR'
    dispute_amount = dispute.DisputedFunds.Amount / 100
    result_code = dispute.ResultCode
    new_dispute = not r
    with website.db.get_cursor() as cursor:
        r = cursor.one("""
            INSERT INTO disputes
                        (id, creation_date, type, amount, status, result_code, exchange_id, participant)
                 VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (id) DO UPDATE
                    SET status = excluded.status
                      , result_code = excluded.result_code
              RETURNING *
        """, (dispute.Id, dispute.CreationDate, dispute_type, dispute_amount, status, result_code, e_id, p_id))
        if status == 'CLOSED':
            if result_code == 'LOST':
                # Recover as much of the lost money as possible
                recover_lost_funds(website.db, exchange, dispute_amount, dispute.RepudiationId)
            else:
                assert result_code == 'WON'
                # Unlock the funds
                cursor.run("""
                    UPDATE cash_bundles
                       SET disputed = false
                     WHERE origin = %s
                """, (e_id,))
        else:
            # Lock the disputed funds
            lock_disputed_funds(cursor, exchange, dispute_amount)
    # Notify admin
    disputed_funds = website.db.render("""
        SELECT owner, withdrawer, sum(amount) AS amount
          FROM ( SELECT COALESCE(get_username(b.owner), '') AS owner
                      , COALESCE(get_username((
                            SELECT e.participant FROM exchanges e WHERE e.id = b.withdrawal
                        )), '') AS withdrawer
                      , b.amount
                   FROM cash_bundles b
                  WHERE b.origin = %s
               ) b
      GROUP BY owner, withdrawer
    """, (r.exchange_id,))
    original_owner = Participant.from_id(p_id)
    Participant.from_username('LiberapayOrg').notify(
        'dispute',
        base_spt=None,
        dispute=r._asdict(),
        disputed_funds=disputed_funds,
        new_dispute=new_dispute,
        profile_url=original_owner.url(),
        force_email=True,
    )

elif cls:
    # Check stuff
    try:
        payio = cls.get(RessourceId)
    except cls.DoesNotExist:
        raise response.error(400, "bad RessourceId: DoesNotExist")
    if payio.Status != status:
        raise response.error(400, "status mismatch")
    status = status.lower()
    e_id = payio.Tag
    if event == 'PAYOUT_REFUND':
        # Payout refunds are created by MangoPay and have no Tag
        e_id = record_payout_refund(website.db, payio)
    elif event == 'PAYIN_NORMAL' and not e_id:
        e_id = record_unexpected_payin(website.db, payio)
    e_status = website.db.one("SELECT status FROM exchanges WHERE id = %s", (e_id,))
    if e_status == status:
        raise response.success(200, "already done")
    if event == 'PAYIN_NORMAL' and payio.PaymentType == 'BANK_WIRE':
        expected = (payio.DeclaredDebitedFunds - payio.DeclaredFees) / D(100)
        if status != 'succeeded':
            expected = expected.zero()
        credited_amount = payio.CreditedFunds / D(100)
        if credited_amount == Money(0, 'XXX'):
            credited_amount.currency = expected.currency
        if credited_amount != expected or not payio.Tag:
            # Check the fee
            paid_fees = payio.Fees / D(100)
            debited_amount = payio.DebitedFunds / D(100)
            standard_fee, new_vat = skim_bank_wire(debited_amount)[1:]
            if abs(paid_fees - standard_fee) > D('0.01'):
                try:
                    raise Exception('fee mismatch in bankwire payin')
                except Exception as e:
                    website.tell_sentry(e, state, allow_reraise=False)
        if credited_amount != expected:
            # The user didn't send the expected amount of money
            note = (
                'amount mismatch: expected %s (fee %s)' %
                (payio.DeclaredDebitedFunds, payio.DeclaredFees)
            )
            website.db.run("""
                UPDATE exchanges
                   SET amount = %s
                     , fee = %s
                     , vat = %s
                     , note = %s
                 WHERE id = %s
            """, (credited_amount.amount, paid_fees.amount, new_vat.amount, note, e_id))

    if payio.AuthorId == website.app_conf.mangopay_client_id:
        if event == 'PAYOUT_NORMAL' and status == 'succeeded':
            # This is the monthly fee profit payout, ignore it
            raise response.success(200, '{}')

    # Update the DB
    error = repr_error(payio)
    if event == 'PAYOUT_REFUND':
        error = payio.RefundReason.message
    p = Participant.from_mangopay_user_id(payio.AuthorId)
    was_closed = p.status == 'closed'
    affects_balance = (
        event == 'PAYOUT_NORMAL' and status == 'failed' or
        event in ('PAYIN_NORMAL', 'PAYOUT_REFUND') and status == 'succeeded'
    )
    reopen = was_closed and affects_balance
    if reopen:
        p.update_status('active')
    assert e_id
    record_exchange_result(website.db, e_id, payio.Id, status, error, p)
    e = website.db.one("SELECT * FROM exchanges WHERE id = %s", (e_id,))

    # Attempt to transfer the money to the user's current wallet
    if affects_balance and e.wallet_id != p.mangopay_wallet_id:
        w = Wallet.get(e.wallet_id)
        assert w.Balance.Currency == 'EUR'
        balance = w.Balance.Amount
        if balance:
            transfer(
                website.db, p.id, p.id, balance, 'account-switch',
                tipper_mango_id=w.Owners[0].Id, tipper_wallet_id=w.Id,
            )

    # Notify the user
    if event == 'PAYIN_NORMAL' and payio.PaymentType == 'BANK_WIRE':
        if e.timestamp > (utcnow() - NOTIFICATION_TIMEOUT):
            expired = payio.ResultCode == '101109'
            if expired:
                ignore = website.db.one("""
                    SELECT count(*) > 0 AS ignore
                      FROM exchanges e
                     WHERE e.participant = %(participant)s
                       AND e.amount > 0
                       AND e.status = 'succeeded'
                       AND e.timestamp > %(timestamp)s - INTERVAL '20 minutes'
                       AND e.timestamp < %(timestamp)s + INTERVAL '12 hours'
                """, e._asdict())
                if ignore:
                    raise response.json({'notification': 'no (duplicate payin)'})
                p.notify('payin_bankwire_expired', exchange=e._asdict())
            else:
                p.notify('payin_bankwire_'+status, exchange=e._asdict(), force_email=reopen)
        else:
            raise response.json({'notification': 'no (payin too old)'})
    elif event == 'PAYIN_NORMAL' and payio.PaymentType == 'DIRECT_DEBIT':
        p.notify('payin_directdebit_'+status, exchange=e._asdict(), force_email=reopen)
    elif event == 'PAYOUT_NORMAL' and status != 'succeeded':
        p.notify('withdrawal_'+status, exchange=e._asdict(), force_email=reopen)
    elif event == 'PAYOUT_REFUND' and status == 'succeeded':
        d = website.db.one("SELECT * FROM exchanges WHERE id = %s", (e.refund_ref,))._asdict()
        d['note'] = e.note
        p.notify('withdrawal_failed', exchange=d, force_email=reopen)

else:
    raise response.error(400, "unknown event type")

[---] text/plain

[---] application/json
{}
