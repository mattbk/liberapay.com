from itertools import chain

from liberapay.utils import get_participant

[-----------------------]
participant = get_participant(state, restrict=True)
if user != participant:
    raise response.error(403) # disallow admins

if request.method == 'POST':
    out = []
    new_tips = request.body
    seen = set()
    for tip in new_tips:
        seen.add(tip['username'])
        one = {"username": tip['username']}
        currency = tip.get('currency', 'EUR')
        if currency not in constants.STANDARD_TIPS:
            raise response.error(400,"`currency` value '%s' in body is invalid or non-supported" % currency)
        try:
            amount = Money(parse_decimal(tip['amount']), currency)
            amount = participant.set_tip_to(
                tip['username'], amount, tip['period'],
            )['amount']
        except Exception as exc:
            amount = "error"
            one['error'] = exc.__class__.__name__
        one['amount'] = amount
        out.append(one)

    if request.qs.get('also_prune', 'false').lower() in ('true', '1', 'yes'):
        old_tips = participant.get_current_tips()
        for tip in old_tips:
            if tip['username'] not in seen:
                participant.set_tip_to(tip['username'], Money(0, 'EUR'), tip['period'])

else:
    tips, total, pledges, pledges_total = participant.get_giving_for_profile()

    out = []
    for tip in chain(tips, pledges):
        if tip.amount == 0:
            continue
        out.append({ "username": tip.username
                   , "amount": str(tip.amount)
                   , "period": str(tip.period)
                   , "periodic_amount": str(tip.periodic_amount)
                    })

[---] application/json via json_dump
out
